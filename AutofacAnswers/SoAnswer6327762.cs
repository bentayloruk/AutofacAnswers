
using Autofac;
using Moq;

namespace AutofacAnswers
{
    public class SoAnswer6327762
    {
        public void DoAnswer()
        {
            //How do I mock the autofac's autogenerated delegate factories?
            //http://stackoverflow.com/questions/6327762/how-do-i-mock-the-autofacs-autogenerated-delegate-factories
            var builder = new ContainerBuilder();
            builder.RegisterType<Entry>().As<IEntry>();
            builder.RegisterType<Match>().As<IMatch>();
            builder.RegisterType<Series>().As<ISeries>();
            builder.RegisterType<EntryImporter>().As<IEntryImporter>();

            var series = new Mock<ISeries>(MockBehavior.Strict);
            builder.RegisterInstance(series.Object);

            var match = new Mock<IMatch>(MockBehavior.Strict);
            builder.RegisterInstance(match.Object);

            // How to register MyEntryFactory as Entry.Factory for autofac to resolve?
            builder.Register<Entry.Factory>(c => MyEntryFactory).As<Entry.Factory>();

            using (IContainer container = builder.Build())
            {
                var importer = container.Resolve<IEntryImporter>();
            }
        }

        IEntry MyEntryFactory() {
            var entry = new Mock<IEntry>();
            return entry.Object;
        }
    }
    public interface IEntryImporter
    {
    }

    public class EntryImporter : IEntryImporter
    {
        readonly Entry.Factory _entryFactory;

        public EntryImporter(ISeries series, IMatch match, Entry.Factory entryFactory)
        {
            _entryFactory = entryFactory;
            _entryFactory();
        }
    }

    public interface IEntry
    {
    }

    public class Entry : IEntry
    {
        #region Delegates

        public delegate IEntry Factory();

        #endregion
    }

    public interface IMatch
    {
    }

    public class Match : IMatch
    {
    }

    public interface ISeries
    {
    }

    public class Series : ISeries
    {
    }

}